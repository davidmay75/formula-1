{"version":3,"sources":["Components/DriverResults.js","Components/SeasonStandings.js","Components/SeasonStandingsList.js","Components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["DriverResults","driverId","code","url","givenName","familyName","points","dateOfBirth","nationality","img","position","wins","className","Card","bg","Header","as","style","width","href","Body","Text","ConstructorDrivers","constructorId","constructorName","constructorUrl","constructorNationality","drivers","map","driver","SeasonStandingsList","constructorDrivers","year","Object","keys","length","constructor","SeasonStandings","name","Drivers","Search","useState","constructorDriversResults","setConstructorDriversResults","setYear","round","Container","Form","Group","Label","Control","value","controlId","type","placeholder","min","max","step","onChange","e","target","Button","onClick","axios","get","then","res","data","JSON","parse","request","response","MRData","hasOwnProperty","constructors","StandingsTable","StandingsLists","DriverStandings","forEach","standing","Constructors","Driver","push","newKey","driverArray","console","log","returnArray","values","catch","App","Row","Col","xs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd07105b.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n//import \"./CSS/driver.css\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\n\r\nconst DriverResults = ({\r\n  driverId,\r\n  code,\r\n  url,\r\n  givenName,\r\n  familyName,\r\n  dateOfBirth,\r\n  nationality,\r\n  img,\r\n  points,\r\n  position,\r\n  wins,\r\n}) => {\r\n  return (\r\n    <div className=\"driver\">\r\n      <Card bg=\"primary\">\r\n        <Card.Header as=\"h4\" style={{ width: \"14rem\" }}>\r\n          <a href={url}>\r\n            {givenName} {familyName}\r\n          </a>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>\r\n            <div className=\"container\">\r\n              <div className=\"row\">points: {points}</div>\r\n              <div className=\"row\">position: {position}</div>\r\n              <div className=\"row\">wins: {wins}</div>\r\n            </div>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverResults;\r\n","import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport DriverResults from \"./DriverResults\";\r\n\r\nconst ConstructorDrivers = ({\r\n  constructorId,\r\n  constructorName,\r\n  constructorUrl,\r\n  constructorNationality,\r\n  img,\r\n  drivers,\r\n}) => {\r\n  return (\r\n    <div className=\"container standing\">\r\n      <div className=\"row constructor\">\r\n          <a href={constructorUrl}>\r\n              <h2>\r\n              {constructorName} - {constructorNationality}\r\n              </h2>\r\n          </a>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"drivers\">\r\n          <div className=\"driver\">\r\n            {drivers.map((driver) => (\r\n              <DriverResults\r\n                driverId={driver.driverId}\r\n                code={driver.code}\r\n                url={driver.url}\r\n                givenName={driver.givenName}\r\n                familyName={driver.familyName}\r\n                wins={driver.wins}\r\n                position={driver.position}\r\n                points={driver.points}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConstructorDrivers;\r\n","import SeasonStandings from './SeasonStandings'\r\n\r\nconst SeasonStandingsList = ({constructorDrivers, year}) => {\r\n\r\n    if (Object.keys(constructorDrivers).length > 0){\r\n        return (\r\n            <div className=\"container results-list\">\r\n                <h2>\r\n                    {year !==\"\" ? year : \"t\"}\r\n                </h2>\r\n    \r\n                <div className=\"row\">\r\n                 {constructorDrivers.map(constructor => (\r\n                        <SeasonStandings\r\n                            constructorId={constructor.constructorId}\r\n                            constructorUrl={constructor.url}\r\n                            constructorName={constructor.name}\r\n                            constructorNationality={constructor.nationality}   \r\n                            drivers={constructor.Drivers}\r\n                        /> \r\n                    ))}        \r\n                              \r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return (\r\n            <div></div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default SeasonStandingsList;","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Results from \"./Results\";\r\nimport ConstructorDriversList from \"./ConstructorDriversList\";\r\nimport SeasonStandingsList from \"./SeasonStandingsList\";\r\nimport { DropdownButton, Dropdown, Container, Form, Button } from \"react-bootstrap\";\r\nimport Form1 from \"react-bootstrap/Form\";\r\n\r\nconst Search = () => {\r\n  //const [driverResults, setDriverResults] = useState([])\r\n  const [constructorResults, setConstructorResults] = useState([]);\r\n  const [constructorDriversResults, setConstructorDriversResults] = useState(\r\n    []\r\n  );\r\n  const [year, setYear] = useState(\"2021\");\r\n  const [round, setRound] = useState(0);\r\n  const [searchType, setSearchType] = \"\";\r\n\r\n  // function getDriverByYear() {\r\n  //     ///api/f1/2007/drivers.json driver format\r\n  //     ///api/f1/2007.json RaceTable result\r\n  //     axios.get('http://ergast.com/api/f1/' + year + \"/drivers.json\")\r\n  //         .then(res => {\r\n\r\n  //             const response = JSON.parse(res.request.response)\r\n  //             const data = response.MRData\r\n\r\n  //             if (data.hasOwnProperty('DriverTable')) {\r\n\r\n  //                 setDriverResults(data.DriverTable.Drivers)\r\n\r\n  //             }else{\r\n  //                 console.log(\"NO DriverTable\")\r\n  //             }\r\n\r\n  //         }).catch((e) => {\r\n  //             console.log(e)\r\n  //         })\r\n  // }\r\n\r\n  function getDriverStandings() {\r\n    //params - year\r\n    //standings after certain race - http://ergast.com/api/f1/' + year + /round \"/driverStandings.json\r\n    axios\r\n      .get(\"https://ergast.com/api/f1/\" + year + \"/driverStandings.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"StandingsTable\")) {\r\n          let constructors = {};\r\n\r\n          const standingsArray =\r\n            data.StandingsTable.StandingsLists[0].DriverStandings;\r\n\r\n          //for each standing - create Constructor object with array of drivers objects\r\n          standingsArray.forEach((standing) => {\r\n            const constructor = standing.Constructors[0];\r\n\r\n            if (!constructors.hasOwnProperty(constructor.constructorId)) {\r\n              //set key to constructorId\r\n              let newKey = constructor.constructorId;\r\n              //get driver object and add to array\r\n              let driverArray = [];\r\n              let driver = standing.Driver;\r\n              //add driver standings to the driver object before pushing to array\r\n              driver[\"position\"] = standing.position;\r\n              driver[\"points\"] = standing.points;\r\n              driver[\"wins\"] = standing.wins;\r\n              driverArray.push(standing.Driver);\r\n              console.log(\"NEW DRIVER array\");\r\n              //add driver aray to constructor Object\r\n              constructor[\"Drivers\"] = driverArray;\r\n              //add new Key Value to constructors object\r\n              constructors[newKey] = constructor;\r\n            } else {\r\n              //If constructor found - add driver to its driverArray\r\n              //add driver standings to the driver object before pushing to array\r\n              let driver = standing.Driver;\r\n              driver[\"position\"] = standing.position;\r\n              driver[\"points\"] = standing.points;\r\n              driver[\"wins\"] = standing.wins;\r\n\r\n              constructors[constructor.constructorId].Drivers.push(\r\n                standing.Driver\r\n              );\r\n            }\r\n          });\r\n\r\n          let returnArray = Object.values(constructors);\r\n          console.log(\"constructors object being set\");\r\n          console.log(returnArray);\r\n\r\n          setConstructorDriversResults(returnArray);\r\n        } else {\r\n          console.log(\"No StandingsTable...\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function getInfoByResults() {\r\n    //params - year\r\n    axios\r\n      .get(\"http://ergast.com/api/f1/\" + year + \"/1/results.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"RaceTable\")) {\r\n          const resultsArray = data.RaceTable.Races[0].Results;\r\n          let constructors = {};\r\n\r\n          resultsArray.forEach((result) => {\r\n            const constructor = result.Constructor;\r\n\r\n            if (!constructors.hasOwnProperty(constructor.constructorId)) {\r\n              let newKey = constructor.constructorId;\r\n              let driverArray = [];\r\n              driverArray.push(result.Driver);\r\n              constructor[\"Drivers\"] = driverArray;\r\n              constructors[newKey] = constructor;\r\n            } else {\r\n              constructors[constructor.constructorId].Drivers.push(\r\n                result.Driver\r\n              );\r\n            }\r\n          });\r\n\r\n          let returnArray = Object.values(constructors);\r\n          setConstructorDriversResults(returnArray);\r\n        } else {\r\n          console.log(\"No StandingsTable...\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function getConstructorByYear() {\r\n    axios\r\n      .get(\"http://ergast.com/api/f1/\" + year + \"/constructors.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"ConstructorTable\")) {\r\n          setConstructorResults(data.ConstructorTable.Constructors);\r\n          console.log(data.ConstructorTable.Constructors);\r\n        } else {\r\n          console.log(\"NO ConstructorTable\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Container className=\"search text-light\">\r\n      <div className=\"row\">\r\n        <h1 className=\"text-primary\">Search</h1>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Label>Search Type</Form.Label>\r\n\r\n                <Form.Control as=\"select\">\r\n                  <option value=\"constructorAndDrivers\">\r\n                    Driver Standings\r\n                  </option>\r\n                  <option value=\"circuits\">Circuits - Coming soon</option>\r\n                  <option value=\"raceResults\">Race Results - Coming soon</option>\r\n                  <option value=\"seasonResults\">Season Results - Coming soon</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n        <div className=\"col searchParameters\">\r\n          <div className=\"row\">\r\n            <Form>\r\n              <Form.Group className=\"mb-3\" controlId=\"formYear\">\r\n                <Form.Label>Year</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder={year}\r\n                  min=\"1950\"\r\n                  max=\"2021\"\r\n                  step=\"1\"\r\n                  value={year}\r\n                  onChange={(e) => setYear(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"formYear\">\r\n                <Form.Label>Round</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder={round}\r\n                  min=\"0\"\r\n                  max=\"22\"\r\n                  step=\"1\"\r\n                  value={round}\r\n                  onChange={(e) => setYear(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-2\">\r\n        <Button onClick={getDriverStandings}>SEARCH</Button>\r\n      </div>\r\n\r\n      <div>\r\n        <SeasonStandingsList constructorDrivers={constructorDriversResults} />\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import \"./App.scss\";\nimport Search from \"./Components/Search\";\nimport { Button, Row, Col } from \"react-bootstrap\";\n\nimport { Navbar, Container } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Navbar bg=\"primary\" className=\"fluid\" >\n        <Container>\n          <Row>\n            <Col>🏎️</Col>\n            <Col xs={8}><strong>F1 Information Sation </strong></Col>\n            <Col>🏎️</Col>\n          </Row>\n\n\n        </Container>\n      </Navbar> */}\n\n      <div className=\"container\">\n          <Row className=\"top-title\">\n            <Col className=\"car-emoji\">🏎️🏎️</Col>\n            <Col xs={8}>\n              <strong>F1 Information Sation </strong>\n            </Col>\n            <Col className=\"car-emoji\">🏎️🏎️</Col>\n          </Row>\n\n        <div className=\"row mt-3\">\n          <Search />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}