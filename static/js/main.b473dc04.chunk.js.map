{"version":3,"sources":["Components/Search.js","Components/DriverResults.js","Components/SeasonStandings.js","Components/SeasonStandingsList.js","Components/Circuit.js","Components/CircuitsList.js","Components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["useSearch","useState","searchResults","setSearchResults","queryType","setQueryType","year","setYear","render","Container","className","Form","Group","Label","Control","as","onChange","e","target","value","label","map","option","controlId","type","placeholder","min","max","step","Button","onClick","axios","get","then","res","data","JSON","parse","request","response","MRData","hasOwnProperty","constructors","StandingsTable","StandingsLists","DriverStandings","forEach","standing","constructor","Constructors","constructorId","driver","Driver","position","points","wins","Drivers","push","newKey","driverArray","Object","values","console","log","catch","getDriverStandings","CircuitTable","Circuits","DriverResults","driverId","code","url","givenName","familyName","dateOfBirth","nationality","img","Card","bg","Header","style","width","href","Body","ConstructorDrivers","constructorName","constructorUrl","constructorNationality","drivers","SeasonStandingsList","keys","length","SeasonStandings","name","Circuit","circuitId","circuitName","Location","locality","country","lat","long","CircuitsList","circuit","Results","Component","App","height","fontSize","Row","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b473dc04.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\n\r\nconst useSearch = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [queryType, setQueryType] = useState(\"driverStandings\");\r\n\r\n  const [year, setYear] = useState(\"2021\");\r\n  //const [round, setRound] = useState(0);\r\n  const [groupByTeam, setGroupByTeam] = useState(true);\r\n\r\n  const options = [\r\n    {\r\n      label: \"Driver Standings\",\r\n      value: \"driverStandings\",\r\n    },\r\n    {\r\n      label: \"Circuits\",\r\n      value: \"circuits\",\r\n    },\r\n  ];\r\n\r\n  function search() {\r\n\r\n    switch (queryType) {\r\n      case \"driverStandings\":\r\n        getDriverStandings();\r\n        break;\r\n      case \"circuits\":\r\n        getCircuits();\r\n        break;\r\n      default:\r\n        console.log(\"QueryType not valid \", { queryType });\r\n    }\r\n  }\r\n\r\n  function generateUrl() {\r\n    //http://ergast.com/api/f1/' year / round / queryType.json\r\n  }\r\n\r\n  function getCircuits() {\r\n    //params - year\r\n    axios\r\n      .get(\"https://ergast.com/api/f1/\" + year + \"/circuits.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        console.log(\"Data\", data.CircuitTable.Circuits);\r\n\r\n        if (data.hasOwnProperty(\"CircuitTable\")) {\r\n          setSearchResults(data.CircuitTable.Circuits);\r\n        } else {\r\n          console.log(\"No CircuitTable...\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function getDriverStandings() {\r\n    if (groupByTeam) {\r\n      //do what we currently have\r\n    } else {\r\n      //only show drivers\r\n    }\r\n    //params - year\r\n    //standings after certain race - http://ergast.com/api/f1/' + year + /round \"/driverStandings.json\r\n    axios\r\n      .get(\"https://ergast.com/api/f1/\" + year + \"/driverStandings.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"StandingsTable\")) {\r\n          let constructors = {};\r\n\r\n          const standingsArray =\r\n            data.StandingsTable.StandingsLists[0].DriverStandings;\r\n\r\n          //for each standing - create Constructor object with array of drivers objects\r\n          standingsArray.forEach((standing) => {\r\n            const constructor = standing.Constructors[0];\r\n\r\n            if (!constructors.hasOwnProperty(constructor.constructorId)) {\r\n              //set key to constructorId\r\n              let newKey = constructor.constructorId;\r\n              //get driver object and add to array\r\n              let driverArray = [];\r\n              let driver = standing.Driver;\r\n              //add driver standings to the driver object before pushing to array\r\n              driver[\"position\"] = standing.position;\r\n              driver[\"points\"] = standing.points;\r\n              driver[\"wins\"] = standing.wins;\r\n              driverArray.push(standing.Driver);\r\n\r\n              //add driver aray to constructor Object\r\n              constructor[\"Drivers\"] = driverArray;\r\n              //add new Key Value to constructors object\r\n              constructors[newKey] = constructor;\r\n            } else {\r\n              //If constructor found - add driver to its driverArray\r\n              //add driver standings to the driver object before pushing to array\r\n              let driver = standing.Driver;\r\n              driver[\"position\"] = standing.position;\r\n              driver[\"points\"] = standing.points;\r\n              driver[\"wins\"] = standing.wins;\r\n\r\n              constructors[constructor.constructorId].Drivers.push(\r\n                standing.Driver\r\n              );\r\n            }\r\n          });\r\n\r\n          // set results to the array of objects created for constructor and drivers\r\n          setSearchResults(Object.values(constructors));\r\n\r\n        } else {\r\n          console.log(\"No StandingsTable...\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function getInfoByResults() {\r\n    //params - year\r\n    axios\r\n      .get(\"http://ergast.com/api/f1/\" + year + \"/1/results.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"RaceTable\")) {\r\n          const resultsArray = data.RaceTable.Races[0].Results;\r\n          let constructors = {};\r\n\r\n          resultsArray.forEach((result) => {\r\n            const constructor = result.Constructor;\r\n\r\n            if (!constructors.hasOwnProperty(constructor.constructorId)) {\r\n              let newKey = constructor.constructorId;\r\n              let driverArray = [];\r\n              driverArray.push(result.Driver);\r\n              constructor[\"Drivers\"] = driverArray;\r\n              constructors[newKey] = constructor;\r\n            } else {\r\n              constructors[constructor.constructorId].Drivers.push(\r\n                result.Driver\r\n              );\r\n            }\r\n          });\r\n\r\n          let returnArray = Object.values(constructors);\r\n          setSearchResults(returnArray);\r\n        } else {\r\n          console.log(\"No StandingsTable...\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function getConstructorByYear() {\r\n    axios\r\n      .get(\"http://ergast.com/api/f1/\" + year + \"/constructors.json\")\r\n      .then((res) => {\r\n        const response = JSON.parse(res.request.response);\r\n        const data = response.MRData;\r\n\r\n        if (data.hasOwnProperty(\"ConstructorTable\")) {\r\n          setSearchResults(data.ConstructorTable.Constructors);\r\n          console.log(data.ConstructorTable.Constructors);\r\n        } else {\r\n          console.log(\"NO ConstructorTable\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  return {\r\n    searchResults,\r\n    queryType,\r\n\r\n    render: (\r\n      <Container className=\"search text-light\">\r\n        <div className=\"row\">\r\n          <h1 className=\"text-primary\">Search</h1>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col\">            \r\n            <div className=\"row\">\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label>Search Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    onChange={(e) => setQueryType(e.target.value)\r\n                    }\r\n                  >\r\n                    {options.map((option) => (\r\n                      <option value={option.value}>{option.label}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col searchParameters\">\r\n            <div className=\"row\">\r\n              <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formYear\">\r\n                  <Form.Label>Year</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={year}\r\n                    min=\"1950\"\r\n                    max=\"2021\"\r\n                    step=\"1\"\r\n                    value={year}\r\n                    onChange={(e) => setYear(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group className=\"mb-3\" controlId=\"formRound\">\r\n                  <Form.Label>Round</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={round}\r\n                    min=\"0\"\r\n                    max=\"22\"\r\n                    step=\"1\"\r\n                    value={round}\r\n                    onChange={(e) => setRound(e.target.value)}\r\n                  />\r\n                </Form.Group> */}\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-2\">\r\n          <Button onClick={search}>SEARCH</Button>\r\n        </div>\r\n      </Container>\r\n    ),\r\n  };\r\n};\r\n\r\nexport default useSearch;\r\n","import { Card } from \"react-bootstrap\";\r\n\r\nconst DriverResults = ({\r\n  driverId,\r\n  code,\r\n  url,\r\n  givenName,\r\n  familyName,\r\n  dateOfBirth,\r\n  nationality,\r\n  img,\r\n  points,\r\n  position,\r\n  wins,\r\n}) => {\r\n  return (\r\n    <div className=\"driver\">\r\n      <Card bg=\"primary\">\r\n        <Card.Header as=\"h4\" style={{ width: \"14rem\" }}>\r\n          <a href={url}>\r\n            {givenName} {familyName}\r\n          </a>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <div className=\"container\">\r\n              <div className=\"row\">points: {points}</div>\r\n              <div className=\"row\">position: {position}</div>\r\n              <div className=\"row\">wins: {wins}</div>\r\n            </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverResults;\r\n","import DriverResults from \"./DriverResults\";\r\n\r\nconst ConstructorDrivers = ({\r\n  constructorId,\r\n  constructorName,\r\n  constructorUrl,\r\n  constructorNationality,\r\n  img,\r\n  drivers,\r\n}) => {\r\n  return (\r\n    <div className=\"container standing\">\r\n      <div className=\"row constructor\">\r\n          <a href={constructorUrl}>\r\n              <h2>\r\n              {constructorName} - {constructorNationality}\r\n              </h2>\r\n          </a>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"drivers\">\r\n          <div className=\"driver\">\r\n            {drivers.map((driver) => (\r\n              <DriverResults\r\n                driverId={driver.driverId}\r\n                code={driver.code}\r\n                url={driver.url}\r\n                givenName={driver.givenName}\r\n                familyName={driver.familyName}\r\n                wins={driver.wins}\r\n                position={driver.position}\r\n                points={driver.points}\r\n                key={driver.driverId}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConstructorDrivers;\r\n","import SeasonStandings from './SeasonStandings'\r\n\r\nconst SeasonStandingsList = ({searchResults}) => {\r\n\r\n    if (Object.keys(searchResults).length > 0 && searchResults[0].hasOwnProperty('constructorId')){\r\n        return (\r\n            <div className=\"container results-list\">               \r\n    \r\n                <div className=\"row\">\r\n                 {searchResults.map(constructor => (\r\n                        <SeasonStandings\r\n                            constructorId={constructor.constructorId}\r\n                            constructorUrl={constructor.url}\r\n                            constructorName={constructor.name}\r\n                            constructorNationality={constructor.nationality}   \r\n                            drivers={constructor.Drivers}\r\n                            key={constructor.constructorId}\r\n                        /> \r\n                    ))}        \r\n                              \r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return (\r\n            <div></div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default SeasonStandingsList;","import { Card} from \"react-bootstrap\";\r\n\r\nconst Circuit = ({ circuitId, circuitName, url, Location }) => {\r\n  return (\r\n    <div className=\"driver\">\r\n      <Card bg=\"primary\">\r\n        <Card.Header as=\"h4\" style={{ width: \"14rem\" }}>\r\n          <a href={url}>{circuitName}</a>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <div className=\"container\">\r\n              <div className=\"row\">City: {Location.locality}</div>\r\n              <div className=\"row\">Country: {Location.country}</div>\r\n              <div className=\"row\">\r\n                Location: {Location.lat} {Location.long}\r\n              </div>\r\n            </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Circuit;\r\n","import Circuit from \"./Circuit\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nconst CircuitsList = ({ searchResults }) => {\r\n  if (Object.keys(searchResults).length > 0 && searchResults[0].hasOwnProperty('circuitId')) {\r\n    return (\r\n      <Container className=\"results-list\">\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n\r\n            \r\n          {searchResults.map((circuit) => (\r\n            <Circuit\r\n              circuitId={circuit.circuitId}\r\n              circuitName={circuit.circuitName}\r\n              url={circuit.url}\r\n              Location={circuit.Location}\r\n              key = {circuit.circuitId}\r\n            />\r\n          ))}\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default CircuitsList;\r\n","import SeasonStandingsList from \"./SeasonStandingsList\";\r\nimport CircuitsList from \"./CircuitsList\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n//this is where I should order driverStandings by constructor?\r\n\r\n//I need to take queryType and have an object that correlates it to the list coompnent i need?\r\n\r\nconst Results = ({ searchResults, queryType }) => {\r\n  //results - onject containing results to pass to the list component\r\n  //resultsType - which compnent to render\r\n  let Component = \"\";\r\n\r\n  switch (queryType) {\r\n    case \"driverStandings\":\r\n      Component = SeasonStandingsList;\r\n      break;\r\n    case \"circuits\":\r\n      Component = CircuitsList;\r\n      break;\r\n    default:\r\n        Component = SeasonStandingsList;\r\n  }\r\n\r\n  if (Object.keys(searchResults).length > 0) {\r\n    return (\r\n      <Container className=\"results\">\r\n        <div>\r\n          <Component searchResults={searchResults} />\r\n        </div>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default Results;\r\n","import \"./App.scss\";\r\n\r\nimport useSearch from \"./Components/Search\";\r\nimport Results from \"./Components/Results\";\r\nimport { Row, Col, Navbar, Container  } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  //I could probably save the results from driverStandings and if no other paramters except the queryType change\r\n  //then set the driverStandings back to results if they change back the queryType\r\n  const {render, searchResults, queryType } = useSearch();\r\n\r\n\r\n  return (\r\n    <Container className=\"App\" style={{height:\"100%\"}}>\r\n      <h2 className=\"top-title\" style={{fontSize:\"100%\"}}>🏎️🏎️ F1 Information Sation 🏎️🏎️</h2>\r\n     \r\n      {/* <Navbar bg=\"primary\" className=\"fluid\" >\r\n        <Container>\r\n          <Row>\r\n            <Col>🏎️</Col>\r\n            <Col xs={8}><strong>F1 Information Sation </strong></Col>\r\n            <Col>🏎️</Col>\r\n          </Row>\r\n        </Container>\r\n      </Navbar> */}\r\n\r\n      <Container className=\"main\" >\r\n        \r\n        \r\n        <Row className=\"mt-3\">\r\n          {/* <Search /> */}\r\n          {render}\r\n        </Row>\r\n\r\n        {searchResults.length !==0 ?\r\n          <Row className=\"row mt-3\">\r\n          <Results searchResults={searchResults} queryType={queryType}/>\r\n        </Row>\r\n          :\r\n          <Row style={{height: '100vh'}}></Row>\r\n        }\r\n\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode >\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}